I have been asked far too often in interviews the following:

describe a closure
When a function is defined in another function and it has access to the outer function's context even after the outer function returns.

function foo() {
  const secret = Math.trunc(Math.random()*100)
  return function inner() {
    console.log(`The secret number is ${secret}.`)
  }
}
const f = foo() // `secret` is not directly accessible from outside `foo`
f() // The only way to retrieve `secret`, is to invoke `f`
f then stores the inner function and then gets executed again to return secret

what is the difference between const, let, and var?
var declarations are globally scoped or function scoped while let and const are block scoped.
var variables can be updated and re-declared within its scope; let variables can be updated but not re-declared; const variables can neither be updated nor re-declared.
They are all hoisted to the top of their scope. But while var variables are initialized with undefined, let and const variables are not initialized.
While var and let can be declared without being initialized, const must be initialized during declaration.

what are some ES6 methods and what do they do?

Array.prototype.find() - It finds a value from an array, based on the specific criteria that are passed to this method. 
var arr=[5,22,19,25,34];    
var result=arr.find(x=>x>20);    
22

array.entries() - This method returns an array iterator object, which can be used to loop through keys and values of arrays.
Entries will return an array of arrays, in which every child array is an array of [index, value].

var colours = ["Red", "Yellow", "Blue", "Black"];  
var show = colours.entries();  

[ 0, 'Red' ]
[ 1, 'Yellow' ]
[ 2, 'Blue' ]
[ 3, 'Black' ]
                       
what is the difference between apply, call, and bind?
They all attach this into function (or object) and the difference is in the function invocation.
call attaches this into function and executes the function immediately
bind attaches this into function and it needs to be invoked separately like this
apply is similar to call except that it takes an array-like object instead of listing the arguments out one at a time

can I describe the Javascript event loop?
https://www.youtube.com/watch?v=twusETr-r9Y
Javascript single threaded language

The while loop will keep going if certain code isnt stopped
Set interval never got cleared, how would you fix it




And if I'm specifically applying for a React role, the following find their way in as well:

describe the React lifecycle methods and what they do

initilization
Mounting
Update
Unmouting


Initilization - This is the stage where the component is constructed with the provided properties and a default state.
Mouting - mount in the browser. 
	“render” – Render is what mounts the component onto the browser in this state
	“componentWillMount” - executed just before the reach component is about the mount. The mounting on the DOM is done after this stage
	“componentDidMount” - final ReactJS hook method that is executed after the component mounts the DOM. It’s also performed once in the lifecycle and occurs after the first rendering.

Updating - The third stage starts when the component has been adopted on the browser. This can then grow by receiving new updates from the program. The user can interact with the program, and then the component can be updated accordingly.
	“shouldComponentUpdate” - The method tells the program about the state of rendering when it is updated.
	“component will update” - It’s then used to prepare the upcoming render, in the case where some previous calculation is necessary before returning a response.
	“componentDidUpdate” - You can then initiate new libraries to reload as well so that you can maintain an updated program throughout the process.

unmouting - unmount the component
	“componentWillUnmount” - pertains to the core unmounting and removal from the DOM. The cleaning up of the component is also performed here.


have you used React hooks? which ones?
State hook - useState, adds local state to the component, easy to grab a current state and update that state via the function

do you prefer class-based components or functional?
class based - if you need to use the life cycle hooks
otherwise functional

how do you handle state? which state management tools have you used?
component based - hooks
context - for a global value needing to be passed down good for user authentication no prop-drilling
library - when you have to have a global state like a cart for a store or a login

have you worked with TypeScript? what is your opinion of it
Used it, I like it, just makes sure you write readable code and arn't guessing what your trying to pass through

General JS Assessment
● Why did you pick software for your career?
● What is your favorite project that you’ve worked on outside of work and school?
● How do you stay up to date on changes in the JavaScript world?
● When you run into an issue, what resources do you use to find your solution?
● What are some design patterns you frequently use when writing code?
● What are your thoughts on unit testing?
● When writing code, what are some techniques you utilize to make testing that code
easier?
● What are some of your favorite things about JavaScript in general?
● What is a SPA?
	single page application 
● What is ES6?
	ECMAScript 2015 is also known as ES6 and ECMAScript 6.
● What are some of your favorite things about ES6?
arrow functions - makes writing functions look cleaner
● What is the relationship between ECMAScript and JavaScript?
	ECMAScript is a standardization for scripting languages to create a general-purpose scripting language Javascript is a general-purpose scripting language
● What is the current ECMAScript edition?
	Every year there is one 
● What are some things you look for when you’re doing a code review?
	Commentented out code, console.log logical functions
● What does it mean to refactor code?
	Refactoring is intended to improve the design, structure, and/or implementation of the software (its non-functional attributes), while preserving its functionality
● Why is separation of concerns important to us as developers?
	Better code clarity. It is much easier to understand what is going on in the program when each module has a concise and clear API with a logically scoped set of methods.

● What tools do you typically use to ensure your code is nice and clean and follows best
practices?

keep your design straightforward for as long as is practically possible - without sacrificing maintainability.

● How do you go about picking up new technologies, tools, frameworks, etc?

JavaScript
● What are some ways to access a HTML element via JavaScript?
document.getElementById(“idname”)
document.getElementsByClassName(“classname”)
document.getElementsByTagName(“tagname”)
document.querySelector(selectors)
document.querySelectorAll(selectors)

● What are the three keywords used to define a JavaScript variable?
let const var 
● What’s the difference between let and const?
var: The scope of a variable defined with the keyword “var” is limited to the “function” within which it is defined. If it is defined outside any function, the scope of the variable is global.
var is “function scoped”.

let: The scope of a variable defined with the keyword “let” or “const” is limited to the “block” defined by curly braces i.e. {} .
“let” and “const” are“block scoped”.

const: The scope of a variable defined with the keyword “const” is limited to the block defined by curly braces. However if a variable is defined with keyword const, it cannot be reassigned.
“const” cannot be re-assigned to a new value. However it CAN be mutated.

● What is a ternary operator?
The conditional (ternary) operator is the only JavaScript operator that takes three operands: a condition followed by a question mark (?), 
then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy. 
This operator is frequently used as a shortcut for the if statement.

function getFee(isMember) {
  return (isMember ? '$2.00' : '$10.00');
}

console.log(getFee(true));
// expected output: "$2.00"

console.log(getFee(false));
// expected output: "$10.00"

console.log(getFee(null));
// expected output: "$10.0

● What are the types in Javascript?
strings, numbers, booleans, undefined, and null, Objects and Arrays 

● What is the difference between = vs == vs ===?
= - usually used for assignment
== - abstract equality operator (equality)  does type coercion
=== - strict equality operator (Identity) does not do type coercion

● How do you convert JavaScript data to a string? (JSON.stringify())

const value = 12345;
// Concat Empty String
value + '';
// Template Strings
`${value}`;
// JSON.stringify
JSON.stringify(value);
// toString()
value.toString();
// String()
String(value);
// RESULT
// '12345'

● What does the debugger keyword do?
The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.
When the debugger is invoked, execution is paused at the debugger statement. It is like a breakpoint in the script source.

● Describe your JavaScript debugging process.

● Explain the following syntax: myString && myString; (outside an if block)
	typically used with boolean values console.log(a > 0 && b > 0);
● What are template literals?
template strings - Template literals allow variables in strings: let text = `Welcome ${firstName}, ${lastName}!`;
Template literals allow expressions in strings: let total = `Total: ${(price * (1 + VAT)).toFixed(2)}`;

● What is an arrow function? How is it different from a “traditional” function?
	Allows for cleaner neater functions
cant be used as a constructor cant be called with new, don;t have their own this or argument binding

● What is the spread operator? For bonus points, when working with arrays, how was this

accomplished prior to the advent of the spread operator? (array.apply())
○ What is a pitfall (gotcha) of copying an array with newArray = ...[]
● What is the difference between for ... of versus for ... in?

● What does the extends keyword do?
● What is a constructor?
● How is a superclass different from a subclass?
● What is the purpose of the super keyword?
● What is the value of typeof(null)? (an object)
● What’s the difference between an anonymous function and a named function?
● What is hoisting?
● What is an IIFE?
● Explain the follow array methods:
○ map
○ filter
○ reduce
○ push
○ pop
○ shift
○ unshift
○ forEach
● How do you check if an array has elements?
● How can you check how many properties an object has?
CSS
● What’s the difference between a class and ID?
● What’s the difference between em and rem?
● What is the purpose of the keyword !important?
● Is !important something that is okay to use on a regular basis? I usually rephrase this
question similar to, “What is your philosophy on when it’s okay to use !important?”
● How can you avoid using !important?
● What is the difference between padding and margin?
● What are the sides of the CSS box model?
● What’s the difference between box-sizing content-box versus border-box?
● What is a media query?
● What is Sass?
● What are some benefits of using Sass?
● What is flexbox?
● What is grid and how does it differ from flexbox?
● You’re implementing a header in which the nav element are inline left to right, with two
nav elements aligned to the left side of the header and one nav element aligned to the
right side of the header. Should you grid or flexbox to accomplish this layout and why?
(flexbox; it’s one dimensionsional)
● Can CSS grid and flexbox be used together?
General Dev
● What are the HTTP methods for a RESTful Service? Ie: REST protocol verbs

● What is OWASP and why do we care?
● What VCS’s have you used?
● Agile
HTTP
● What is status code 401? (unauthorized)
● What is status code 200? (success / ok)
● What is status code 302? (found)
● What is status code 418? (I’m a teapot)
● What is status code 500? (internal server error)
React
● What does it mean to have a component driven architecture?
● What are some of your strategies for creating and maintaining a component driven
architecture?
● Describe the React lifecycle.
● What is JSX?
● Why is it important to provide a key attribute to the JSX element/component when
mapping over an array to render the JSX?
● When mapping over an array, is index the best thing to use as the key’s identifier?
● How do you pass data from a parent component to a child component?
● What is the difference between state and props?
● How do you update state in React?
● How do you add a CSS class to a JSX element?
● Have you worked with Styled Components?
● How do you keep your Styled Components clean and easy to maintain?
● What is the difference between a function component and class component?
● Does a function component have lifecycle hooks?
● How do you run a piece of logic only on the initial render of a function component?
● What is the difference between a controlled component and uncontrolled component?
● How do you pass an event from a child component to a parent component?
● What is a spread attribute?
● What are Fragments and what problem do they solve?
● What are Higher-Order components, commonly referred to as a “HOC?”
● What problem(s) does the Context API aim to solve and when should it be used?
● How can you manage state in a class component?
● How can you manage state in a functional component?
● What does the Hook useState return?
● What is React’s recommendation on how to manage state when several components
need to reflect the same changing data? (Lifting State Up)
● What is your philosophy on managing props?
● What is the Hooks equivalent of componentDidMount?
● Explain React’s reconciliation to me. What is reconciliation?

● When using useEffect, how do you subscribe to a specific value such that the effect fires
when that value is updated?
● What testing libraries have you used with React?
● What are some techniques you utilize to make testing your components easier?
● What does it mean to “mock something” when writing unit tests? Why is mocking
important?
● Let’s say you have a modal in a parent component, and you’d like to open that modal
from a child component that is several generations down from the parent. How would
you go about opening that modal?
Redux
● Have you worked with Redux?
● What are actions?
○ Payloads of information that send data from your application to the store
● What are some of your strategies for keeping the Redux store clean and normalized?
● What are the three principles of Redux?
○ Single source of truth
○ State is read-only
○ Mutations are written as pure functions
● Describe the process of adding a new object to the Redux store and how to consume
that same data in a different component.
● In Redux, what is the selector pattern and what are the key benefits of using it?
Angular 2+
● What is Angular?
● What is TypeScript?
● What are some of the building blocks of Angular?
● Are you familiar with using the Angular CLI?
● How do you create a component using the CLI?
● What are some Angular lifecycle hooks?
● What is transpiling in Angular?
● What are some of the built-in Angular directives?
● How is the ngFor directive used?
● How is the ngIf directive used?
● What is string interpolation?
● What are pipes?
● What are some of the property binding best practices?
● How can you route guard in Angular?
● What are the two types of compilation in Angular? AOT and JIT
● What is AOT compilation?
● What is data binding and what are the ways it can be done?
● What are @Input and @Output used for?
● What is a provider in Angular?

● Why is one way the NgDestroy lifecycle hook can be helpful?
● What’s the difference between Observables and Promises?
● What RxJS method is used to access the data being emitted by an Observable?
● What is ViewEncapsulation?
● What is a RouterOutlet?
● What is the purpose for the package.json in an Angular project?
● How would you use ng-content?
● Why would you want to avoid manipulating the DOM directly?
● What is zone.js? How does Angular use it?
React Native
● React utilizes the Virtual DOM to render components. What does React Native utilize?
(Native API’s)
● How do you animate elements using React Native? (Animated API)
● In HTML/JSX, we would typically use the paragraph element/component to render
paragraph text. What component would be used to render paragraph text in React
Native? (Text)
● How are elements styled in React Native? (stylesheets in JS)
● With Web, we have access to JS touch events via the web API. How does React Native
handle touch events? (PanResponder)
● With React, we use react-router to push move users through our site. What does React
Native utilize to move users through scenes? (Navigator)
● Can React Native code live side-by-side with native code?
● What strategies do you use to differentiate your React Native apps’ look and feel based
on the user’s device (ie: iOS vs Android)?
● What is a ScrollView?
● What React Native API is used to communicate with a REST API? (Fetch)
● How do you control a components width and height? (Fixed vs Flex)
● What are the two types of List Views? (FlatList, SectionList)
● How do you add a static image to a scene in your app?
● Describe your React Native debugging process.
● What Javascript syntax transformers ship with React Native? (Babel)
● Can React Native be used for building apps for TVs, such as Apple TV and Android TV?